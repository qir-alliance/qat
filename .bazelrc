# Platform independent configuration
build --workspace_status_command "python config/workspace-status.py"

# We would turn this on globally, but unfortunattely
# it kills external libraries
# build --cxxopt=-Wall
# build --cxxopt=-Wextra
# build --cxxopt=-Wconversion
# build --cxxopt=-Wpedantic
# build --cxxopt=-Werror

build --cxxopt=-std=c++17
build --host_cxxopt=-std=c++17
build --cxxopt=-DTROELS=1
# build --sandbox_debug

# Ideally these should be moved to user configuration
build --cxxopt=-O0
# build --cxxopt=-DNDEBUG
build --cxxopt=-g 
build --strip=never

# ## SEE https://github.com/RobotLocomotion/drake/tree/master/tools/dynamic_analysis
# build --build_tests_only
# build --copt=-g
# # https://github.com/google/sanitizers/wiki/AddressSanitizer#faq
# build --copt=-Wno-macro-redefined
# build --copt=-fno-common
# build --copt=-fsanitize=address,integer,undefined
# build --copt=-fsanitize-address-use-after-scope
# build --copt=-fstandalone-debug
# build --copt=-O0
# build --copt=-fno-omit-frame-pointer
# build --linkopt=-fsanitize=address,integer,undefined
# build --linkopt=-fsanitize-address-use-after-scope
# # ld.gold: warning: Cannot export local symbol __asan_extra_spill_area
# build --linkopt=-fuse-ld=ld
# build --start_end_lib=no
# build --test_env=ASAN_OPTIONS
# build --test_env=LSAN_OPTIONS
# build --test_env=ASAN_SYMBOLIZER_PATH
# build --test_env=LSAN_SYMBOLIZER_PATH
# # LSan is run with ASan by default
# build --test_tag_filters=-gurobi,-mosek,-snopt,-no_asan,-no_lsan
# build --test_lang_filters=-sh,-py
# # Typical slowdown introduced by AddressSanitizer is 2x.
# # See https://clang.llvm.org/docs/AddressSanitizer.html
# build --test_timeout=150,750,2250,9000  # 2.5x

# build --cxxopt=-fvisibility=hidden
# build --cxxopt=-fvisibility-inlines-hidden
# other options that does not work on OS X, -fsanitize=leak,memory

# To get debug symbols
# build --sandbox_debug 
# build --spawn_strategy=standalone
# build --save_temps="true" 
# build -c dbg 
# build --strip never

# Define the default systems lib location
build:linux --define=PREFIX=/usr
build:linux --define=LIBDIR=$(PREFIX)/lib
build:linux --define=INCLUDEDIR=$(PREFIX)/include
build:macos --define=PREFIX=/usr
build:macos --define=LIBDIR=$(PREFIX)/lib
build:macos --define=INCLUDEDIR=$(PREFIX)/include

# By default we use C++17
build:android --cxxopt=-std=c++17
build:android --host_cxxopt=-std=c++17
build:ios --cxxopt=-std=c++17
build:ios --host_cxxopt=-std=c++17
build:linux --cxxopt=-std=c++17
build:linux --host_cxxopt=-std=c++17
build:macos --cxxopt=-std=c++17
build:macos --host_cxxopt=-std=c++17
build:windows --cxxopt=/std:c++17
build:windows --host_cxxopt=/std:c++17

build --apple_platform_type=macos
# build --announce_rc


# Tries to import additional config
try-import %workspace%/.bazelrc.configure
try-import %workspace%/.bazelrc.user
